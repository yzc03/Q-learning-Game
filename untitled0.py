# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w-SCvXTBrx3FzVldJER9NCkCmx9sO-cW
"""

!pip install pygame

import numpy as np
import random
import pygame
import time

GRID_SIZE = 5  # 迷宫大小
ACTIONS = ["UP", "DOWN", "LEFT", "RIGHT"]
ACTION_MAP = {"UP": (0, -1), "DOWN": (0, 1), "LEFT": (-1, 0), "RIGHT": (1, 0)}

# 初始化 Q-table
Q_table = np.zeros((GRID_SIZE, GRID_SIZE, len(ACTIONS)))

# Q-learning 参数
alpha = 0.1  # 学习率
gamma = 0.9  # 折扣因子
epsilon = 1.0  # 探索率
epsilon_decay = 0.99
min_epsilon = 0.1
episodes = 500  # 训练轮数

for episode in range(episodes):
    state = (0, 0)  # 代理起始位置
    done = False

    while not done:
        # 选择动作（ε-贪心策略）
        if random.uniform(0, 1) < epsilon:
            action_idx = random.randint(0, 3)  # 随机探索
        else:
            action_idx = np.argmax(Q_table[state[0], state[1], :])  # 选择最优动作

        # 计算下一状态
        action = ACTIONS[action_idx]
        next_state = (state[0] + ACTION_MAP[action][0], state[1] + ACTION_MAP[action][1])

        # 边界检测
        if next_state[0] < 0 or next_state[0] >= GRID_SIZE or next_state[1] < 0 or next_state[1] >= GRID_SIZE:
            next_state = state  # 撞墙保持原地

        # 奖励函数
        if next_state == (4, 4):  # 目标位置
            reward = 100
            done = True
        elif next_state == state:  # 撞墙
            reward = -10
        else:
            reward = -1  # 每一步扣分

        # Q-table 更新
        Q_table[state[0], state[1], action_idx] = (1 - alpha) * Q_table[state[0], state[1], action_idx] + \
            alpha * (reward + gamma * np.max(Q_table[next_state[0], next_state[1], :]))

        state = next_state

    # 衰减探索率
    epsilon = max(min_epsilon, epsilon * epsilon_decay)

print("训练完成！")


# 初始化 Pygame
pygame.init()
CELL_SIZE = 100
screen = pygame.display.set_mode((GRID_SIZE * CELL_SIZE, GRID_SIZE * CELL_SIZE))

# 颜色
WHITE, BLACK, BLUE, GREEN = (255, 255, 255), (0, 0, 0), (0, 0, 255), (0, 255, 0)

def draw_game(agent_pos):
    screen.fill(WHITE)
    for x in range(GRID_SIZE):
        for y in range(GRID_SIZE):
            rect = pygame.Rect(x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE)
            pygame.draw.rect(screen, BLACK, rect, 1)

    # 目标
    pygame.draw.rect(screen, GREEN, (4 * CELL_SIZE, 4 * CELL_SIZE, CELL_SIZE, CELL_SIZE))

    # 代理
    pygame.draw.rect(screen, BLUE, (agent_pos[0] * CELL_SIZE, agent_pos[1] * CELL_SIZE, CELL_SIZE, CELL_SIZE))
    pygame.display.flip()

# 代理决策
state = (0, 0)
running = True
while running:
    draw_game(state)
    pygame.time.delay(500)

    action_idx = np.argmax(Q_table[state[0], state[1], :])
    action = ACTIONS[action_idx]
    next_state = (state[0] + ACTION_MAP[action][0], state[1] + ACTION_MAP[action][1])

    if next_state == (4, 4):
        print("到达目标！")
        running = False
    else:
        state = next_state

pygame.quit()



from google.colab import auth
auth.authenticate_user()
!git config --global user.email "yuanzicheng03@163.com"
!git config --global user.name "yzc03"

!git init
!git remote add origin https://github.com/yzc03/Q-learning-Game.git
!git add .
!git commit -m "Initial commit"
!git branch -M main
!git push -u origin main

!git remote remove origin

!git remote add origin https://github.com/yzc03/Q-learning-Game.git

!echo "# Q-learning 迷宫游戏" > README.md
!echo "## 🎮 游戏简介" >> README.md
!echo "- 使用 Q-learning 训练智能体在迷宫中找到最优路径。" >> README.md
!echo "## 📜 依赖" >> README.md
!echo "\`\`\`sh" >> README.md
!echo "pip install pygame numpy" >> README.md
!echo "\`\`\`" >> README.md
!echo "## 🎥 演示" >> README.md
!echo "![游戏演示](demo.gif)" >> README.md
!git add README.md
!git commit -m "Add README"
!git push origin main

!git remote remove origin
!git remote add origin https://yzc03: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@github.com/yzc03/Q-learning-Game.git

!git push -u origin main

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/yzc03/Q-learning-Game.git
# %cd Q-learning-Game

python3 /content/Q-learning-Game/Q-learning-Game

ls /content/Q-learning-Game